---
import Navigation from '../components/Navigation.astro';
import Footer from '../components/Footer.astro';
import Background from '../components/Background.astro';
import SkipLink from '../components/SkipLink.astro';
import '../styles/global.css';

export interface Props {
  title: string;
  description?: string;
  image?: string;
  type?: string;
  url?: string;
}

const { title, description = "A minimalist personal blog", image, type = "website", url } = Astro.props;

// Generate canonical URL
const canonicalURL = url ? new URL(url) : new URL(Astro.url.pathname, Astro.site || 'https://bitspace.software');
const imageURL = image ? new URL(image, Astro.site || 'https://bitspace.software') : new URL('/placeholder.jpg', Astro.site || 'https://bitspace.software');
---

<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- Basic Meta Tags -->
    <title>{title}</title>
    <meta name="description" content={description} />
    <link rel="canonical" href={canonicalURL} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content={type} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={imageURL} />
    <meta property="og:site_name" content="Bitspace Software" />
    <meta property="og:locale" content="es_ES" />
    
    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:url" content={canonicalURL} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={imageURL} />
    <meta name="twitter:creator" content="@marom_beltran" />
    
    <!-- Additional SEO -->
    <meta name="robots" content="index, follow" />
    <meta name="author" content="Marlon Beltran" />
    <meta name="theme-color" content="#3B82F6" />
    
    <!-- Security Headers -->
    <meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'self' 'unsafe-inline' https://www.googletagmanager.com https://www.google-analytics.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' https://api.spotify.com https://accounts.spotify.com; frame-src 'none';" />
    <meta http-equiv="X-Content-Type-Options" content="nosniff" />
    <meta http-equiv="X-Frame-Options" content="DENY" />
    <meta http-equiv="X-XSS-Protection" content="1; mode=block" />
    <meta http-equiv="Referrer-Policy" content="strict-origin-when-cross-origin" />
    
    <!-- Preconnect for performance -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500;600&display=swap" rel="stylesheet">
    
    <!-- Critical CSS inline - Complete dark mode support -->
    <style>
      /* Critical CSS for above-the-fold content */
      body { 
        margin: 0; 
        font-family: Inter, system-ui, sans-serif; 
        background-color: #ffffff;
        color: #18181b;
      }
      
      /* Dark mode critical styles - applied immediately */
      .dark {
        background-color: #0F0F0F !important;
        color: #FFFFFF !important;
      }
      
      .dark body {
        background-color: #0F0F0F !important;
        color: #FFFFFF !important;
      }
      
      /* Essential Tailwind classes for dark mode */
      .bg-white { background-color: #ffffff; }
      .dark\\:bg-brand-background { background-color: #0F0F0F !important; }
      .text-zinc-900 { color: #18181b; }
      .dark\\:text-brand-text { color: #FFFFFF !important; }
      .dark\\:text-brand-textSecondary { color: #9CA3AF !important; }
      .dark\\:bg-brand-surface { background-color: #1F2937 !important; }
      .dark\\:border-brand-border { border-color: #374151 !important; }
      .dark\\:text-brand-accent { color: #60A5FA !important; }
      .dark\\:text-brand-accentOrange { color: #F59E0B !important; }
      .dark\\:bg-brand-accentBlue { background-color: #3B82F6 !important; }
      .dark\\:bg-brand-black { background-color: #000000 !important; }
      
      /* Override common conflicting classes */
      .dark .bg-white { background-color: #0F0F0F !important; }
      .dark .text-zinc-900 { color: #FFFFFF !important; }
      .dark .text-zinc-800 { color: #FFFFFF !important; }
      .dark .text-zinc-700 { color: #9CA3AF !important; }
      .dark .text-zinc-600 { color: #9CA3AF !important; }
      .dark .text-zinc-500 { color: #9CA3AF !important; }
      .dark .text-zinc-400 { color: #9CA3AF !important; }
      
      /* Layout classes */
      .min-h-screen { min-height: 100vh; }
      .flex { display: flex; }
      .flex-col { flex-direction: column; }
      .max-w-3xl { max-width: 48rem; }
      .mx-auto { margin-left: auto; margin-right: auto; }
      .px-4 { padding-left: 1rem; padding-right: 1rem; }
      .sm\\:px-6 { padding-left: 1.5rem; padding-right: 1.5rem; }
      .w-full { width: 100%; }
      .flex-grow { flex-grow: 1; }
      .py-12 { padding-top: 3rem; padding-bottom: 3rem; }
      
      /* Header specific styles */
      .dark header {
        background-color: rgba(15, 15, 15, 0.8) !important;
        backdrop-filter: blur(16px);
      }
      
      /* Ensure immediate application */
      * {
        box-sizing: border-box;
      }
    </style>
    
    
    
    <!-- Service Worker Unregistration -->
    <script>
      if ('serviceWorker' in navigator) {
        // Unregister any existing service workers
        navigator.serviceWorker.getRegistrations().then(function(registrations) {
          for(let registration of registrations) {
            registration.unregister();
            console.log('Service worker unregistered');
          }
        });
        
        // Clear all caches
        if ('caches' in window) {
          caches.keys().then(function(cacheNames) {
            return Promise.all(
              cacheNames.map(function(cacheName) {
                return caches.delete(cacheName);
              })
            );
          }).then(function() {
            console.log('All caches cleared');
          });
        }
      }
    </script>
    
    <!-- Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=GA_MEASUREMENT_ID"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'GA_MEASUREMENT_ID');
    </script>
    
    <!-- Schema.org JSON-LD -->
    <script type="application/ld+json">
      {
        "@context": "https://schema.org",
        "@type": "WebSite",
        "name": "Bitspace Software",
        "description": "Blog sobre datos y desarrollo de software",
        "url": "https://bitspace.software",
        "author": {
          "@type": "Person",
          "name": "Marlon Beltran",
          "url": "https://bitspace.software",
          "sameAs": [
            "https://x.com/marom_beltran",
            "https://github.com/marombeltran",
            "https://www.linkedin.com/in/marlon-beltran-526730203"
          ]
        },
        "publisher": {
          "@type": "Organization",
          "name": "Bitspace Software",
          "url": "https://bitspace.software"
        }
      }
    </script>
  </head>
  <body class="bg-white dark:bg-brand-background text-zinc-900 dark:text-brand-text min-h-screen flex flex-col">
    <!-- Skip to content link -->
    <SkipLink />
    
    <!-- Background component with dot pattern and ambient glow -->
    <Background />
    
    <div class="max-w-3xl mx-auto px-4 sm:px-6 w-full flex-grow">
      <Navigation />
      <main id="main-content" class="py-12" role="main">
        <slot />
      </main>
    </div>
    <Footer />
    
    
    
    <script>
      // Early theme application - before DOM is ready
      (function() {
        const theme = localStorage.getItem('theme');
        const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        const shouldBeDark = theme === 'dark' || (!theme && systemPrefersDark);
        
        if (shouldBeDark) {
          document.documentElement.classList.add('dark');
          document.documentElement.style.backgroundColor = '#0F0F0F';
          console.log('🌙 Early dark mode applied');
        } else {
          document.documentElement.classList.remove('dark');
          console.log('☀️ Early light mode applied');
        }
      })();
      
      // Simplified and robust SPA transition system
      document.addEventListener('DOMContentLoaded', () => {
        console.log('🚀 SPA system initializing...');
        
        const mainContent = document.querySelector('main');
        
        // SPA transition function
        async function loadContent(url) {
          try {
            console.log('🔄 Loading:', url);
            
            // Fetch new content
            const response = await fetch(url);
            if (!response.ok) throw new Error(`HTTP ${response.status}`);
            
            const html = await response.text();
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, 'text/html');
            
            // Extract new content
            const newContent = doc.querySelector('main');
            const newTitle = doc.querySelector('title');
            
            if (!newContent) throw new Error('No main content found');
            
            // Update title first
            if (newTitle) {
              document.title = newTitle.textContent;
            }
            
            // Replace content
            if (mainContent) {
              mainContent.innerHTML = newContent.innerHTML;
            }
            
            // Scroll to top
            window.scrollTo({ top: 0, behavior: 'instant' });
            
            // Re-attach listeners
            attachLinkListeners();
            
            // Force re-apply theme immediately after SPA transition
            ensureThemePersistence();
            
            // Force style recalculation
            requestAnimationFrame(() => {
              ensureThemePersistence();
              document.body.offsetHeight;
              console.log('🎨 Theme re-applied after SPA navigation');
            });
            
            console.log('✅ Transition complete');
            
          } catch (error) {
            console.error('❌ SPA Error:', error);
            
            // Fallback to normal navigation
            window.location.href = url;
          }
        }
        
        // Attach link listeners
        function attachLinkListeners() {
          const links = document.querySelectorAll('a:not([data-spa-handled])');
          
          links.forEach(link => {
            // Skip external links, anchors, and special links
            if (
              !link.href.startsWith(window.location.origin) ||
              link.href.includes('#') ||
              link.hasAttribute('target') ||
              link.hasAttribute('download') ||
              link.getAttribute('rel') === 'external'
            ) {
              return;
            }
            
            link.setAttribute('data-spa-handled', 'true');
            
            link.addEventListener('click', (e) => {
              // Skip if modifier keys pressed
              if (e.metaKey || e.ctrlKey || e.shiftKey || e.altKey) {
                return;
              }
              
              const targetHref = link.href;
              
              // Skip if same page
              if (targetHref === window.location.href) {
                return;
              }
              
              e.preventDefault();
              console.log('🖱️ Navigating to:', targetHref);
              
              // Update history
              window.history.pushState({ path: targetHref }, '', targetHref);
              
              // Load content
              loadContent(targetHref);
            });
          });
        }
        
        // Initial setup
        attachLinkListeners();
        
        // Handle browser navigation
        window.addEventListener('popstate', (e) => {
          const path = e.state?.path || window.location.href;
          loadContent(path);
        });
        
        console.log('✅ SPA system ready');
      });
      
      // Theme handling
      function setupThemeHandling() {
        const theme = localStorage.getItem('theme');
        const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        const shouldBeDark = theme === 'dark' || (!theme && systemPrefersDark);
        
        console.log('🎨 Setting up theme:', { theme, systemPrefersDark, shouldBeDark });

        // Apply theme class immediately
        if (shouldBeDark) {
          document.documentElement.classList.add('dark');
          // Force immediate styles
          document.documentElement.style.backgroundColor = '#0F0F0F';
          document.body.style.backgroundColor = '#0F0F0F';
          document.body.style.color = '#FFFFFF';
          console.log('🌙 Dark mode activated');
        } else {
          document.documentElement.classList.remove('dark');
          // Force light mode styles
          document.documentElement.style.backgroundColor = '';
          document.body.style.backgroundColor = '';
          document.body.style.color = '';
          console.log('☀️ Light mode activated');
        }

        // Force style recalculation
        requestAnimationFrame(() => {
          document.body.offsetHeight;
          document.documentElement.offsetHeight;
          console.log('🔄 Styles recalculated');
        });
      }
      
      // Enhanced theme toggle functionality
      function toggleTheme() {
        const isDark = document.documentElement.classList.contains('dark');
        console.log('🔄 Toggling theme from:', isDark ? 'dark' : 'light');
        
        // Force immediate theme change
        if (isDark) {
          document.documentElement.classList.remove('dark');
          localStorage.setItem('theme', 'light');
          
          // Force light mode styles immediately
          document.documentElement.style.backgroundColor = '';
          document.body.style.backgroundColor = '';
          document.body.style.color = '';
          
          // Reset all inline styles for light mode
          const allElements = document.querySelectorAll('*');
          allElements.forEach(el => {
            if (el.classList.contains('bg-white')) {
              el.style.backgroundColor = '';
            }
            if (el.classList.contains('text-zinc-900') || el.classList.contains('text-zinc-800')) {
              el.style.color = '';
            }
            if (el.classList.contains('text-zinc-600') || el.classList.contains('text-zinc-500') || el.classList.contains('text-zinc-400')) {
              el.style.color = '';
            }
          });
          
          console.log('☀️ Switched to light mode');
        } else {
          document.documentElement.classList.add('dark');
          localStorage.setItem('theme', 'dark');
          
          // Force dark mode styles immediately
          document.documentElement.style.backgroundColor = '#0F0F0F';
          document.body.style.backgroundColor = '#0F0F0F';
          document.body.style.color = '#FFFFFF';
          
          // Force all elements to use dark mode colors
          const allElements = document.querySelectorAll('*');
          allElements.forEach(el => {
            if (el.classList.contains('bg-white')) {
              el.style.backgroundColor = '#0F0F0F';
            }
            if (el.classList.contains('text-zinc-900') || el.classList.contains('text-zinc-800')) {
              el.style.color = '#FFFFFF';
            }
            if (el.classList.contains('text-zinc-600') || el.classList.contains('text-zinc-500') || el.classList.contains('text-zinc-400')) {
              el.style.color = '#9CA3AF';
            }
          });
          
          console.log('🌙 Switched to dark mode');
        }
        
        // Force immediate style recalculation
        void document.body.offsetHeight;
        void document.documentElement.offsetHeight;
        
        // Force CSS recalculation by reading computed styles
        const bodyStyles = getComputedStyle(document.body);
        const htmlStyles = getComputedStyle(document.documentElement);
        console.log('🎨 Background:', bodyStyles.backgroundColor);
        console.log('🎨 Color:', bodyStyles.color);
        
        console.log('✅ Theme transition complete');
      }
      
      // Listen for theme changes
      window.addEventListener('storage', (e) => {
        if (e.key === 'theme') {
          setupThemeHandling();
        }
      });
      
      // Listen for system theme changes
      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
        if (!localStorage.getItem('theme')) {
          setupThemeHandling();
        }
      });
      
      // Make toggleTheme globally available
      window.toggleTheme = toggleTheme;
      
      // Debug function to check theme state
      window.debugTheme = function() {
        const isDark = document.documentElement.classList.contains('dark');
        const storedTheme = localStorage.getItem('theme');
        const bodyBg = getComputedStyle(document.body).backgroundColor;
        const bodyColor = getComputedStyle(document.body).color;
        
        console.log('🔍 Theme Debug Info:');
        console.log('- HTML has dark class:', isDark);
        console.log('- Stored theme:', storedTheme);
        console.log('- Body background:', bodyBg);
        console.log('- Body color:', bodyColor);
        console.log('- System prefers dark:', window.matchMedia('(prefers-color-scheme: dark)').matches);
      };
      
      // Ensure theme persists during SPA navigation - Enhanced version
      function ensureThemePersistence() {
        const theme = localStorage.getItem('theme');
        const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        const shouldBeDark = theme === 'dark' || (!theme && systemPrefersDark);
        
        // Apply theme class
        if (shouldBeDark) {
          document.documentElement.classList.add('dark');
          // Force immediate dark mode styles
          document.documentElement.style.backgroundColor = '#0F0F0F';
          document.body.style.backgroundColor = '#0F0F0F';
          document.body.style.color = '#FFFFFF';
          
          // Force all elements to use dark mode colors
          const allElements = document.querySelectorAll('*');
          allElements.forEach(el => {
            if (el.classList.contains('bg-white')) {
              el.style.backgroundColor = '#0F0F0F';
            }
            if (el.classList.contains('text-zinc-900') || el.classList.contains('text-zinc-800')) {
              el.style.color = '#FFFFFF';
            }
            if (el.classList.contains('text-zinc-600') || el.classList.contains('text-zinc-500') || el.classList.contains('text-zinc-400')) {
              el.style.color = '#9CA3AF';
            }
          });
        } else {
          document.documentElement.classList.remove('dark');
          // Force light mode styles
          document.documentElement.style.backgroundColor = '';
          document.body.style.backgroundColor = '';
          document.body.style.color = '';
          
          // Reset inline styles for light mode
          const allElements = document.querySelectorAll('*');
          allElements.forEach(el => {
            if (el.classList.contains('bg-white')) {
              el.style.backgroundColor = '';
            }
            if (el.classList.contains('text-zinc-900') || el.classList.contains('text-zinc-800')) {
              el.style.color = '';
            }
            if (el.classList.contains('text-zinc-600') || el.classList.contains('text-zinc-500') || el.classList.contains('text-zinc-400')) {
              el.style.color = '';
            }
          });
        }
        
        console.log('🔄 Theme persistence applied:', shouldBeDark ? 'dark' : 'light');
      }
      
      // Run theme persistence check periodically
      setInterval(ensureThemePersistence, 1000);
      
      // Enhanced Observer to detect DOM changes and re-apply theme
      const themeObserver = new MutationObserver((mutations) => {
        let shouldReapply = false;
        
        mutations.forEach((mutation) => {
          // Check if main content changed
          if (mutation.type === 'childList' && mutation.target.tagName === 'MAIN') {
            shouldReapply = true;
          }
          // Check if any child elements were added
          if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
            shouldReapply = true;
          }
        });
        
        if (shouldReapply) {
          // Apply theme immediately
          ensureThemePersistence();
          
          // Also apply after a short delay to catch any async content
          setTimeout(() => {
            ensureThemePersistence();
            console.log('🔄 Theme re-applied after DOM change');
          }, 100);
        }
      });
      
      // Start observing when DOM is ready
      document.addEventListener('DOMContentLoaded', () => {
        const mainElement = document.querySelector('main');
        if (mainElement) {
          themeObserver.observe(mainElement, { 
            childList: true, 
            subtree: true,
            attributes: false,
            characterData: false
          });
          console.log('👀 Enhanced theme observer started');
        }
        
        // Also observe the entire document for any theme-related changes
        themeObserver.observe(document.documentElement, {
          childList: true,
          subtree: true,
          attributes: true,
          attributeFilter: ['class']
        });
      });
      
      document.addEventListener('DOMContentLoaded', setupThemeHandling);
    </script>
  </body>
</html>

<style>
  /* Ensure main content is always visible */
  main {
    opacity: 1 !important;
    display: block !important;
    visibility: visible !important;
  }
  
  /* Theme transition effect */
  body.theme-transitioning * {
    transition-duration: 0.3s !important;
  }
</style>