---
const navItems = [
  { text: 'Blog', href: '/blog' },
  // { text: 'Etiquetas', href: '/tags' },
  // { text: 'Acerca de', href: '/about' },
  { text: 'RSS', href: 'rss.xml' },
];

// Get current path for active link highlighting
const pathname = new URL(Astro.request.url).pathname;
const currentPath = pathname.slice(1); // remove the first "/"
---

<header class="py-2 sm:py-4 fixed top-0 left-0 right-0 z-40 bg-transparent dark:bg-brand-background/80 sm:bg-white/60 dark:sm:bg-brand-background/40 backdrop-blur-lg sm:backdrop-blur-lg border-b border-transparent sm:border-zinc-100/30 dark:border-zinc-800 dark:sm:border-brand-border/30 theme-transition-all overflow-x-hidden">
  <div class="w-full max-w-7xl mx-auto px-2 sm:px-4 flex items-center justify-between">
        <!-- Logo -->
        <a href="/" class="font-normal text-sm sm:text-xl tracking-tight flex-shrink min-w-0">
          <span class="!text-primary-600 dark:!text-[#FFBF00]">Bitspace</span><span class="hidden sm:inline"> <span class="!text-black dark:!text-white">Software</span></span>
        </a>
    
    <div class="flex items-center gap-1 sm:gap-4 flex-shrink-0 ml-2">
      <!-- Desktop Navigation -->
      <nav class="hidden sm:flex items-center space-x-6">
        {navItems.map(item => {
          const isActive = currentPath === (item.href === '/' ? '' : item.href.slice(1));
          return (
            <a 
              href={item.href} 
              class={`text-sm font-medium ${isActive 
                ? 'text-zinc-900 dark:text-brand-text' 
                : 'text-zinc-600 hover:text-zinc-900 dark:text-brand-textSecondary dark:hover:text-brand-text'}`}
            >
              {item.text}
            </a>
          )
        })}
      </nav>
      
      <!-- Theme Toggle Button -->
      <button 
        id="theme-toggle" 
        class="hidden sm:flex items-center justify-center w-10 h-10 rounded-lg bg-zinc-100 dark:bg-brand-surface hover:bg-zinc-200 dark:hover:bg-brand-border transition-colors" 
        aria-label="Cambiar tema"
        onclick="window.toggleTheme()"
      >
      <!-- Sun icon (visible in dark mode) -->
      <svg class="w-5 h-5 text-zinc-600 dark:text-brand-textSecondary dark:block hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
      </svg>
      <!-- Moon icon (visible in light mode) -->
      <svg class="w-5 h-5 text-zinc-600 dark:text-brand-textSecondary block dark:hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
      </svg>
    </button>
    
    <!-- Mobile Menu Button -->
    <button id="mobile-menu-button" class="sm:hidden flex items-center justify-center w-8 h-8 min-w-[36px] min-h-[36px] p-1.5 rounded-lg hover:bg-zinc-100 dark:hover:bg-zinc-800 transition-colors" aria-label="Menú">
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 text-zinc-900 dark:text-white">
        <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
      </svg>
    </button>
    </div>
  </div>
</header>

<!-- Mobile Menu Overlay -->
<div id="mobile-menu" class="fixed inset-0 z-50 bg-white/80 dark:bg-brand-background/60 backdrop-blur-xl flex flex-col opacity-0 pointer-events-none transition-all duration-300 ease-in-out">
  <div class="flex justify-between items-center p-4 border-b border-zinc-100/30 dark:border-brand-border/30">
        <a href="/" class="font-normal text-lg sm:text-xl tracking-tight overflow-hidden">
          <span class="!text-primary-600 dark:!text-[#FFBF00]">Bitspace</span> <span class="!text-black dark:!text-white">Software</span>
        </a>
    <button id="close-menu-button" class="text-zinc-900 dark:text-brand-text flex items-center justify-center w-10 h-10 min-w-[44px] min-h-[44px] p-2 rounded-lg hover:bg-zinc-100 dark:hover:bg-brand-surface transition-colors" aria-label="Cerrar menú">
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
        <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>
  </div>
  
  <nav class="flex-1 flex flex-col items-center justify-center space-y-6 text-center">
    {navItems.map((item, index) => {
      const isActive = currentPath === (item.href === '/' ? '' : item.href.slice(1));
      return (
        <a 
          href={item.href} 
          class={`text-lg font-medium mobile-nav-item opacity-0 translate-y-4 ${isActive 
            ? 'text-zinc-900 dark:text-brand-text' 
            : 'text-zinc-600 hover:text-zinc-900 dark:text-brand-textSecondary dark:hover:text-brand-text'}`}
          style={`transition-delay: ${index * 0.05}s;`}
        >
          {item.text}
        </a>
      )
    })}
    <div class="pt-4 mobile-nav-item opacity-0 translate-y-4" style="transition-delay: 0.25s;">
      <button 
        id="mobile-theme-toggle" 
        class="flex items-center justify-center w-10 h-10 rounded-lg bg-zinc-100 dark:bg-brand-surface hover:bg-zinc-200 dark:hover:bg-brand-border transition-colors" 
        aria-label="Cambiar tema"
        onclick="window.toggleTheme()"
      >
        <!-- Sun icon (visible in dark mode) -->
        <svg class="w-5 h-5 text-zinc-600 dark:text-brand-textSecondary dark:block hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
        </svg>
        <!-- Moon icon (visible in light mode) -->
        <svg class="w-5 h-5 text-zinc-600 dark:text-brand-textSecondary block dark:hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
        </svg>
      </button>
    </div>
  </nav>
</div>

<!-- Spacer to prevent content from hiding behind fixed header -->
<div class="h-12 sm:h-16"></div>

<script>
  // Enhanced mobile menu toggle with animations
  document.addEventListener('DOMContentLoaded', () => {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const closeMenuButton = document.getElementById('close-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const navItems = document.querySelectorAll('.mobile-nav-item');
    
    // Open menu with animations
    mobileMenuButton?.addEventListener('click', () => {
      if (!mobileMenu) return;
      
      // Prevent body scrolling
      document.body.style.overflow = 'hidden';
      
      // Show menu with fade in
      mobileMenu.classList.remove('pointer-events-none');
      mobileMenu.classList.add('pointer-events-auto');
      
      // Animate opacity
      setTimeout(() => {
        mobileMenu.style.opacity = '1';
        
        // Animate each nav item with staggered delay
        navItems.forEach(item => {
          setTimeout(() => {
            item.classList.remove('opacity-0', 'translate-y-4');
          }, 150);
        });
      }, 50);
    });
    
    // Close menu with animations
    const closeMenu = () => {
      if (!mobileMenu) return;
      
      // Fade out nav items first
      navItems.forEach(item => {
        item.classList.add('opacity-0', 'translate-y-4');
      });
      
      // Then fade out the menu
      setTimeout(() => {
        mobileMenu.style.opacity = '0';
        
        // After animation completes, hide menu and restore scrolling
        setTimeout(() => {
          mobileMenu.classList.remove('pointer-events-auto');
          mobileMenu.classList.add('pointer-events-none');
          document.body.style.overflow = '';
        }, 300);
      }, 100);
    };
    
    // Close button event
    closeMenuButton?.addEventListener('click', closeMenu);
    
    // Close menu when clicking a link
    const mobileLinks = mobileMenu?.querySelectorAll('a');
    mobileLinks?.forEach(link => {
      link.addEventListener('click', closeMenu);
    });
    
    // Close menu on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && mobileMenu?.classList.contains('pointer-events-auto')) {
        closeMenu();
      }
    });
    
    // Add smooth animation to header on scroll
    const header = document.querySelector('header');
    let lastScrollY = window.scrollY;
    
    window.addEventListener('scroll', () => {
      if (!header) return;
      
      const currentScrollY = window.scrollY;
      
      // Add shadow on scroll
      if (currentScrollY > 10) {
        header.classList.add('shadow-sm');
      } else {
        header.classList.remove('shadow-sm');
      }
      
      // Update last scroll position
      lastScrollY = currentScrollY;
    });
  });
</script>

<style>
  /* Smooth animations for mobile navigation */
  .mobile-nav-item {
    transition: opacity 0.5s ease, transform 0.5s ease, color 0.3s ease;
  }
  
  /* Header transition */
  header {
    transition: box-shadow 0.3s ease, transform 0.3s ease, background-color 0.3s ease;
  }
  
  /* Mobile menu button hover effect */
  #mobile-menu-button {
    transition: transform 0.2s ease;
  }
  
  #mobile-menu-button:hover {
    transform: scale(1.05);
  }
  
  /* Mobile menu transition */
  #mobile-menu {
    transition: opacity 0.3s ease;
    backdrop-filter: blur(4px);
  }
</style>

